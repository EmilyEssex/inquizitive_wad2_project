Index: inquizitive_wad2_project/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for inquizitive_wad2_project project.\r\n\r\nGenerated by 'django-admin startproject' using Django 2.2.26.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/2.2/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/2.2/ref/settings/\r\n\"\"\"\r\n\r\nimport os\r\n\r\n\r\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\r\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = '#0hqjv&vop_&k(+ia0z+k@ep+c+7zq62pzb8ab%r_oj@9vfpt&'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'inquizitive',\r\n]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'inquizitive_wad2_project.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'inquizitive_wad2_project.wsgi.application'\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/2.2/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\r\n    }\r\n}\r\n\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/2.2/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_L10N = True\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/2.2/howto/static-files/\r\n\r\nSTATIC_URL = '/static/'\r\n\r\n# new \r\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\r\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\n \r\nTEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')\r\n \r\nSTATIC_DIR = os.path.join(BASE_DIR, 'static') \r\nMEDIA_DIR = os.path.join(BASE_DIR, 'media')\r\n\r\nMEDIA_ROOT = MEDIA_DIR\r\nMEDIA_URL = '/media/'\r\n\r\n\r\nSTATICFILES_DIRS = [STATIC_DIR, ] \r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/inquizitive_wad2_project/settings.py b/inquizitive_wad2_project/settings.py
--- a/inquizitive_wad2_project/settings.py	(revision 42d98afb6f2829f357c39a5f6142017a21c64226)
+++ b/inquizitive_wad2_project/settings.py	(date 1646927012929)
@@ -15,6 +15,10 @@
 
 # Build paths inside the project like this: os.path.join(BASE_DIR, ...)
 BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')
+STATIC_DIR = os.path.join(BASE_DIR, 'static')
+MEDIA_DIR = os.path.join(BASE_DIR, 'media')
+
 
 
 # Quick-start development settings - unsuitable for production
@@ -56,7 +60,7 @@
 TEMPLATES = [
     {
         'BACKEND': 'django.template.backends.django.DjangoTemplates',
-        'DIRS': [],
+        'DIRS': [TEMPLATE_DIR, ],
         'APP_DIRS': True,
         'OPTIONS': {
             'context_processors': [
@@ -107,6 +111,7 @@
 
 LANGUAGE_CODE = 'en-us'
 
+
 TIME_ZONE = 'UTC'
 
 USE_I18N = True
Index: inquizitive/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\r\n \r\nfrom django.db import models\r\nfrom django.contrib import admin\r\nfrom django.template.defaultfilters import slugify\r\nfrom django.contrib.auth.models import User\r\nfrom django.contrib.postgres.fields.jsonb import JSONField\r\n#from inquizitive.models import Quiz\r\n \r\n \r\n# Create your models here.\r\nclass UserProfile(models.Model):\r\n    # links UserProfile to a user model instance.\r\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\r\n    #quiz = models.ManyToManyField('quizzes')\r\n   # scores = models.ManyToManyField(Scores) #changed this from userscores to scores\r\n   # ratings = models.ManyToManyField(Ratings) #changed this from user ratings to ratings\r\n#\r\n    profile = models.ImageField(upload_to = 'profile images', blank=True)\r\n\r\n    class Meta:\r\n        verbose_name_plural = \"User\"\r\n\r\n    def __str__(self):\r\n        return self.user.username\r\n  \r\n#class Answer(models.Model):\r\n   # answerText= models.CharField(max_length=500, blank=True, null=True)\r\n    #question=models.ForeignKey(Question , on_delete=models.CASCADE, related_name=\"answer\")\r\n   #correctAnswer=models.BooleanField(default=False)\r\n    #user=models.ForeignKey(User, on_delete=models.CASCADE)\r\n \r\n    #class Meta:\r\n    #    verbose_name_plural = 'answers'\r\n   # def __str__(self):\r\n    #    return self.answerText\r\n  #\r\n\r\n    \r\nDIFFICULTY_CHOICES=[\r\n    ('easy', 'Easy'),\r\n    ('moderate', 'Moderate'),\r\n    ('hard', 'Hard'),\r\n    ]\r\nclass Quiz(models.Model):\r\n   # creator = models.ForeignKey(UserProfile, on_delete=models.CASCADE, default=\"default value\")\r\n    quizName= models.CharField(max_length=128, null=True)\r\n    quizSubject= models.CharField(max_length=128,null=True)\r\n    \r\n    #privateStatus =models.BooleanField(default=False,help_text=\"Should this quiz only be accessible by a certain group of people?\")\r\n  \r\n    # uniquePasscode=models.CharField(max_length=128, unique=True,blank=True, null=True)\r\n   \r\n    quizDifficulty = models.CharField(max_length=10, choices=(DIFFICULTY_CHOICES), default= DIFFICULTY_CHOICES[0])\r\n    scoreToPass=models.IntegerField(default=0)\r\n    #quizQuestions=models.ManyToManyField(Question)\r\n    class Meta:\r\n        verbose_name_plural = 'quizzes'\r\n    def __str__(self):\r\n        return self.quizName\r\n    def get_quiz_questions(self):\r\n        return self.question_set.all()\r\n    \r\nclass Question(models.Model):\r\n    questionText= models.CharField(max_length=500, unique=True )\r\n    questionMarks=models.IntegerField(default=1)\r\n    quiz=models.ForeignKey(Quiz, on_delete=models.CASCADE, related_name=\"question\")\r\n    #{ \"choices\" : [option 1, option 2, option 3, option 4], \"correct_index\" : 2 }\r\n    #answers = models.JSONField(default = dict)\r\n    optiona=models.CharField(max_length=500,null=True)\r\n    optionb=models.CharField(max_length=500,null=True)\r\n    optionc=models.CharField(max_length=500,null=True)\r\n    optionc=models.CharField(max_length=500,null=True)\r\n    correctAnswer=models.CharField(max_length=500)\r\n    class Meta:\r\n        verbose_name_plural = 'questions'\r\n    def __str__(self):\r\n        return self.questionText\r\n \r\n \r\n#Question(quesionText='John Doe', answers={\r\n#    'optiona': '123 Some House Number', \r\n #   'optionb': 'anything',\r\n  #  'optionc': 'Utah',\r\n#})\r\n#Question.objects.filter(questionText='John Doe', answers__optionb='Utah')\r\n \r\n  \r\n  #  def get_question_answers(self):\r\n      #  return self.answer_set.all()\r\n     #  \r\nclass Comment(models.Model):\r\n     commentText= models.CharField(max_length=500, null=True)\r\n     quiz=models.ForeignKey(Quiz, on_delete=models.CASCADE) \r\n     user=models.ForeignKey(User, on_delete=models.CASCADE) \r\n     #finalScore=models.FloatField(defualt=0)\r\n     class Meta:\r\n        verbose_name_plural = 'comments'\r\n     def __str__(self):\r\n        return self.comment_text\r\n    \r\n \r\n \r\n\r\n#class Scores(models.Model):\r\n   # user = models.ForeignKey(User, on_delete=models.CASCADE)\r\n    #quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)\r\n\r\n    # default score? If unattempted\r\n    #score = models.FloatField(default=0)\r\n\r\n   # class Meta:\r\n    #    verbose_name_plural = \"Scores\"\r\n\r\n   # def __str__(self):\r\n      #  return self.score\r\n    \r\n    \r\n# i think well remove this as we said the create will choose the difficulty level instead\r\n#class Ratings(models.Model): \r\n    #user = models.ForeignKey(User, on_delete=models.CASCADE)\r\n    #quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)\r\n    # default rating should just be unrated??\r\n    #rating = models.IntegerField()\r\n\r\n    #class Meta:\r\n    #    verbose_name_plural = \"Ratings\"\r\n\r\n    #def __str__(self):\r\n    #    return self.rating\r\n\r\n\r\n 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/inquizitive/models.py b/inquizitive/models.py
--- a/inquizitive/models.py	(revision 42d98afb6f2829f357c39a5f6142017a21c64226)
+++ b/inquizitive/models.py	(date 1646858661952)
@@ -1,133 +1,141 @@
 from django.db import models
- 
+
 from django.db import models
 from django.contrib import admin
 from django.template.defaultfilters import slugify
 from django.contrib.auth.models import User
-from django.contrib.postgres.fields.jsonb import JSONField
-#from inquizitive.models import Quiz
- 
- 
+#from django.contrib.postgres.fields.jsonb import JSONField
+
+
+# from inquizitive.models import Quiz
+
+
 # Create your models here.
 class UserProfile(models.Model):
     # links UserProfile to a user model instance.
     user = models.OneToOneField(User, on_delete=models.CASCADE)
-    #quiz = models.ManyToManyField('quizzes')
-   # scores = models.ManyToManyField(Scores) #changed this from userscores to scores
-   # ratings = models.ManyToManyField(Ratings) #changed this from user ratings to ratings
-#
-    profile = models.ImageField(upload_to = 'profile images', blank=True)
+    # quiz = models.ManyToManyField('quizzes')
+    # scores = models.ManyToManyField(Scores) #changed this from userscores to scores
+    # ratings = models.ManyToManyField(Ratings) #changed this from user ratings to ratings
+    #
+    profile = models.ImageField(upload_to='profile images', blank=True)
 
     class Meta:
         verbose_name_plural = "User"
 
     def __str__(self):
         return self.user.username
-  
-#class Answer(models.Model):
-   # answerText= models.CharField(max_length=500, blank=True, null=True)
-    #question=models.ForeignKey(Question , on_delete=models.CASCADE, related_name="answer")
-   #correctAnswer=models.BooleanField(default=False)
-    #user=models.ForeignKey(User, on_delete=models.CASCADE)
- 
-    #class Meta:
-    #    verbose_name_plural = 'answers'
-   # def __str__(self):
-    #    return self.answerText
-  #
+
+
+# class Answer(models.Model):
+# answerText= models.CharField(max_length=500, blank=True, null=True)
+# question=models.ForeignKey(Question , on_delete=models.CASCADE, related_name="answer")
+# correctAnswer=models.BooleanField(default=False)
+# user=models.ForeignKey(User, on_delete=models.CASCADE)
+
+# class Meta:
+#    verbose_name_plural = 'answers'
+# def __str__(self):
+#    return self.answerText
+#
 
-    
-DIFFICULTY_CHOICES=[
+
+DIFFICULTY_CHOICES = [
     ('easy', 'Easy'),
     ('moderate', 'Moderate'),
     ('hard', 'Hard'),
-    ]
+]
+
+
 class Quiz(models.Model):
-   # creator = models.ForeignKey(UserProfile, on_delete=models.CASCADE, default="default value")
-    quizName= models.CharField(max_length=128, null=True)
-    quizSubject= models.CharField(max_length=128,null=True)
-    
-    #privateStatus =models.BooleanField(default=False,help_text="Should this quiz only be accessible by a certain group of people?")
-  
+    # creator = models.ForeignKey(UserProfile, on_delete=models.CASCADE, default="default value")
+    quizName = models.CharField(max_length=128, null=True)
+    quizSubject = models.CharField(max_length=128, null=True)
+
+    # privateStatus =models.BooleanField(default=False,help_text="Should this quiz only be accessible by a certain
+    # group of people?")
+
     # uniquePasscode=models.CharField(max_length=128, unique=True,blank=True, null=True)
-   
-    quizDifficulty = models.CharField(max_length=10, choices=(DIFFICULTY_CHOICES), default= DIFFICULTY_CHOICES[0])
-    scoreToPass=models.IntegerField(default=0)
-    #quizQuestions=models.ManyToManyField(Question)
+
+    quizDifficulty = models.CharField(max_length=10, choices=(DIFFICULTY_CHOICES), default=DIFFICULTY_CHOICES[0])
+    scoreToPass = models.IntegerField(default=0)
+
+    # quizQuestions=models.ManyToManyField(Question)
     class Meta:
         verbose_name_plural = 'quizzes'
+
     def __str__(self):
         return self.quizName
+
     def get_quiz_questions(self):
         return self.question_set.all()
-    
+
+
 class Question(models.Model):
-    questionText= models.CharField(max_length=500, unique=True )
-    questionMarks=models.IntegerField(default=1)
-    quiz=models.ForeignKey(Quiz, on_delete=models.CASCADE, related_name="question")
-    #{ "choices" : [option 1, option 2, option 3, option 4], "correct_index" : 2 }
-    #answers = models.JSONField(default = dict)
-    optiona=models.CharField(max_length=500,null=True)
-    optionb=models.CharField(max_length=500,null=True)
-    optionc=models.CharField(max_length=500,null=True)
-    optionc=models.CharField(max_length=500,null=True)
-    correctAnswer=models.CharField(max_length=500)
+    questionText = models.CharField(max_length=500, unique=True)
+    questionMarks = models.IntegerField(default=1)
+    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE, related_name="question")
+    # { "choices" : [option 1, option 2, option 3, option 4], "correct_index" : 2 }
+    # answers = models.JSONField(default = dict)
+    optiona = models.CharField(max_length=500, null=True)
+    optionb = models.CharField(max_length=500, null=True)
+    optionc = models.CharField(max_length=500, null=True)
+    optionc = models.CharField(max_length=500, null=True)
+    correctAnswer = models.CharField(max_length=500)
+
     class Meta:
         verbose_name_plural = 'questions'
+
     def __str__(self):
         return self.questionText
- 
- 
-#Question(quesionText='John Doe', answers={
+
+
+# Question(quesionText='John Doe', answers={
 #    'optiona': '123 Some House Number', 
- #   'optionb': 'anything',
-  #  'optionc': 'Utah',
-#})
-#Question.objects.filter(questionText='John Doe', answers__optionb='Utah')
- 
-  
-  #  def get_question_answers(self):
-      #  return self.answer_set.all()
-     #  
+#   'optionb': 'anything',
+#  'optionc': 'Utah',
+# })
+# Question.objects.filter(questionText='John Doe', answers__optionb='Utah')
+
+
+#  def get_question_answers(self):
+#  return self.answer_set.all()
+#
 class Comment(models.Model):
-     commentText= models.CharField(max_length=500, null=True)
-     quiz=models.ForeignKey(Quiz, on_delete=models.CASCADE) 
-     user=models.ForeignKey(User, on_delete=models.CASCADE) 
-     #finalScore=models.FloatField(defualt=0)
-     class Meta:
+    commentText = models.CharField(max_length=500, null=True)
+    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
+    user = models.ForeignKey(User, on_delete=models.CASCADE)
+
+    # finalScore=models.FloatField(defualt=0)
+    class Meta:
         verbose_name_plural = 'comments'
-     def __str__(self):
+
+    def __str__(self):
         return self.comment_text
-    
- 
- 
 
-#class Scores(models.Model):
-   # user = models.ForeignKey(User, on_delete=models.CASCADE)
-    #quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
+# class Scores(models.Model):
+# user = models.ForeignKey(User, on_delete=models.CASCADE)
+# quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
 
-    # default score? If unattempted
-    #score = models.FloatField(default=0)
+# default score? If unattempted
+# score = models.FloatField(default=0)
 
-   # class Meta:
-    #    verbose_name_plural = "Scores"
+# class Meta:
+#    verbose_name_plural = "Scores"
 
-   # def __str__(self):
-      #  return self.score
-    
-    
+# def __str__(self):
+#  return self.score
+
+
 # i think well remove this as we said the create will choose the difficulty level instead
-#class Ratings(models.Model): 
-    #user = models.ForeignKey(User, on_delete=models.CASCADE)
-    #quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
-    # default rating should just be unrated??
-    #rating = models.IntegerField()
+# class Ratings(models.Model):
+# user = models.ForeignKey(User, on_delete=models.CASCADE)
+# quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
+# default rating should just be unrated??
+# rating = models.IntegerField()
 
-    #class Meta:
-    #    verbose_name_plural = "Ratings"
+# class Meta:
+#    verbose_name_plural = "Ratings"
 
-    #def __str__(self):
-    #    return self.rating
-
-
- 
\ No newline at end of file
+# def __str__(self):
+#    return self.rating
Index: inquizitive/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.http import HttpResponse\r\nfrom django.shortcuts import render, redirect\r\nfrom django.contrib.auth import authenticate, login, logout, update_session_auth_hash \r\nfrom django.contrib.auth.forms import UserCreationForm, UserChangeForm, PasswordChangeForm\r\nfrom django.contrib import messages \r\nfrom .forms import SignUpForm, EditProfileForm \r\nfrom inquizitive.forms import CreateAQuizForm,  AddAQuestionForm\r\nfrom django.shortcuts import redirect\r\nfrom .models import Quiz\r\n\r\n# Create your views here.\r\n\r\n\r\ndef home(request): \r\n    #everything before render is new -Hana\r\n    quizzes_list = Quiz.objects\r\n    context_dict = {}\r\n    context_dict['boldmessage'] = 'Crunchy, creamy, cookie, candy, cupcake!'\r\n    context_dict['quizzes'] = quizzes_list\r\n    return render(request, 'inquizitive/home.html', {})\r\n\r\n\r\ndef login_user (request):\r\n\tif request.method == 'POST': #if someone fills out form , Post it \r\n\t\tusername = request.POST['username']\r\n\t\tpassword = request.POST['password']\r\n\t\tuser = authenticate(request, username=username, password=password)\r\n\t\tif user is not None:# if user exist\r\n\t\t\tlogin(request, user)\r\n\t\t\tmessages.success(request,('Login Successful'))\r\n\t\t\treturn redirect('home') #routes to 'home' on successful login  \r\n\t\telse:\r\n\t\t\tmessages.success(request,('Error logging in'))\r\n\t\t\treturn redirect('login') #re routes to login page upon unsucessful login\r\n\telse:\r\n\t\treturn render(request, 'inquizitive/login.html', {})\r\n\r\n\r\ndef logout_user(request):\r\n\tlogout(request)\r\n\tmessages.success(request,('You are now logged out'))\r\n\treturn redirect('home')\r\n\r\n\r\ndef register_user(request):\r\n\tif request.method =='POST':\r\n\t\tform = SignUpForm(request.POST)\r\n\t\tif form.is_valid():\r\n\t\t\tform.save()\r\n\t\t\tusername = form.cleaned_data['username']\r\n\t\t\tpassword = form.cleaned_data['password1']\r\n\t\t\tuser = authenticate(username=username, password=password)\r\n\t\t\tlogin(request,user)\r\n\t\t\tmessages.success(request, ('Youre now registered'))\r\n\t\t\treturn redirect('home')\r\n\telse: \r\n\t\tform = SignUpForm() \r\n\r\n\tcontext = {'form': form}\r\n\treturn render(request, 'inquizitive/register.html', context)\r\n\r\n\r\ndef edit_profile(request):\r\n\tif request.method =='POST':\r\n\t\tform = EditProfileForm(request.POST, instance= request.user)\r\n\t\tif form.is_valid():\r\n\t\t\tform.save()\r\n\t\t\tmessages.success(request, ('You have edited your profile'))\r\n\t\t\treturn redirect('home')\r\n\telse: \t\t#passes in user information \r\n\t\tform = EditProfileForm(instance= request.user) \r\n\r\n\tcontext = {'form': form}\r\n\treturn render(request, 'inquizitive/edit_profile.html', context)\r\n\t\r\n\r\ndef change_password(request):\r\n\tif request.method =='POST':\r\n\t\tform = PasswordChangeForm(data=request.POST, user= request.user)\r\n\t\tif form.is_valid():\r\n\t\t\tform.save()\r\n\t\t\tupdate_session_auth_hash(request, form.user)\r\n\t\t\tmessages.success(request, ('You have edited your password'))\r\n\t\t\treturn redirect('home')\r\n\telse: \t\t#passes in user information \r\n\t\tform = PasswordChangeForm(user= request.user) \r\n\r\n\tcontext = {'form': form}\r\n\treturn render(request, 'inquizitive/change_password.html', context)\r\n\r\n\r\n \r\ndef creating_quiz(request): \r\n    user=request.user\r\n    form = CreateAQuizForm()\r\n    if request.method == 'POST':\r\n        form = CreateAQuizForm(request.POST)\r\n        # Have we been provided with a valid form?\r\n        if form.is_valid():\r\n            # Save the new category to the database. \r\n            form.save(commit=True)\r\n            # Now that the category is saved, we could confirm this. \r\n            # For now, just redirect the user back to the index view. \r\n            return redirect('/inquizitive/adding_questions') ### not sure about this\r\n        else:\r\n            # The supplied form contained errors -\r\n            # just print them to the terminal.\r\n            form=CreateAQuizForm()\r\n    # Will handle the bad form, new form, or no form supplied cases. # Render the form with error messages (if any).\r\n    context = {'form': form}\r\n    return render(request, 'inquizitive/creating_quiz.html', context)\r\n\r\n \r\ndef adding_questions(request): \r\n    user=request.user\r\n    \r\n    json = {'a': 1,\r\n            'b': 2,\r\n            'c': 3,\r\n            'd': 4}\r\n    form = AddAQuestionForm( )\r\n    if request.method == 'POST':\r\n        form = AddAQuestionForm(request.POST)\r\n        # Have we been provided with a valid form?\r\n        \r\n        if form.is_valid():\r\n            # Save the new category to the database. \r\n            form.save(commit=True)\r\n            # Now that the category is saved, we could confirm this. \r\n            # For now, just redirect the user back to the index view. \r\n            return redirect('add a question') ### not sure about this\r\n        else:\r\n            # The supplied form contained errors -\r\n            # just print them to the terminal.\r\n            form=AddAQuestionForm()\r\n    # Will handle the bad form, new form, or no form supplied cases. # Render the form with error messages (if any).\r\n    context = {'form': form}\r\n    return render(request, 'inquizitive/adding_questions.html', context)\r\n \r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/inquizitive/views.py b/inquizitive/views.py
--- a/inquizitive/views.py	(revision 42d98afb6f2829f357c39a5f6142017a21c64226)
+++ b/inquizitive/views.py	(date 1646859467094)
@@ -1,18 +1,18 @@
 from django.http import HttpResponse
 from django.shortcuts import render, redirect
-from django.contrib.auth import authenticate, login, logout, update_session_auth_hash 
+from django.contrib.auth import authenticate, login, logout, update_session_auth_hash
 from django.contrib.auth.forms import UserCreationForm, UserChangeForm, PasswordChangeForm
-from django.contrib import messages 
-from .forms import SignUpForm, EditProfileForm 
-from inquizitive.forms import CreateAQuizForm,  AddAQuestionForm
+from django.contrib import messages
+from inquizitive.forms import SignUpForm, EditProfileForm, CreateAQuizForm, AddAQuestionForm
 from django.shortcuts import redirect
-from .models import Quiz
+from inquizitive.models import Quiz
+
 
 # Create your views here.
 
 
-def home(request): 
-    #everything before render is new -Hana
+def home(request):
+    # everything before render is new -Hana
     quizzes_list = Quiz.objects
     context_dict = {}
     context_dict['boldmessage'] = 'Crunchy, creamy, cookie, candy, cupcake!'
@@ -20,78 +20,77 @@
     return render(request, 'inquizitive/home.html', {})
 
 
-def login_user (request):
-	if request.method == 'POST': #if someone fills out form , Post it 
-		username = request.POST['username']
-		password = request.POST['password']
-		user = authenticate(request, username=username, password=password)
-		if user is not None:# if user exist
-			login(request, user)
-			messages.success(request,('Login Successful'))
-			return redirect('home') #routes to 'home' on successful login  
-		else:
-			messages.success(request,('Error logging in'))
-			return redirect('login') #re routes to login page upon unsucessful login
-	else:
-		return render(request, 'inquizitive/login.html', {})
+def login_user(request):
+    if request.method == 'POST':  # if someone fills out form , Post it
+        username = request.POST['username']
+        password = request.POST['password']
+        user = authenticate(request, username=username, password=password)
+        if user is not None:  # if user exist
+            login(request, user)
+            messages.success(request, 'Login Successful')
+            return redirect('home')  # routes to 'home' on successful login
+        else:
+            messages.success(request, 'Error logging in')
+            return redirect('login')  # re routes to login page upon unsuccessful login
+    else:
+        return render(request, 'inquizitive/login.html', {})
 
 
 def logout_user(request):
-	logout(request)
-	messages.success(request,('You are now logged out'))
-	return redirect('home')
+    logout(request)
+    messages.success(request, 'You are now logged out')
+    return redirect('home')
 
 
 def register_user(request):
-	if request.method =='POST':
-		form = SignUpForm(request.POST)
-		if form.is_valid():
-			form.save()
-			username = form.cleaned_data['username']
-			password = form.cleaned_data['password1']
-			user = authenticate(username=username, password=password)
-			login(request,user)
-			messages.success(request, ('Youre now registered'))
-			return redirect('home')
-	else: 
-		form = SignUpForm() 
+    if request.method == 'POST':
+        form = SignUpForm(request.POST)
+        if form.is_valid():
+            form.save()
+            username = form.cleaned_data['username']
+            password = form.cleaned_data['password1']
+            user = authenticate(username=username, password=password)
+            login(request, user)
+            messages.success(request, 'Youre now registered')
+            return redirect('home')
+    else:
+        form = SignUpForm()
 
-	context = {'form': form}
-	return render(request, 'inquizitive/register.html', context)
+    context = {'form': form}
+    return render(request, 'inquizitive/register.html', context)
 
 
 def edit_profile(request):
-	if request.method =='POST':
-		form = EditProfileForm(request.POST, instance= request.user)
-		if form.is_valid():
-			form.save()
-			messages.success(request, ('You have edited your profile'))
-			return redirect('home')
-	else: 		#passes in user information 
-		form = EditProfileForm(instance= request.user) 
+    if request.method == 'POST':
+        form = EditProfileForm(request.POST, instance=request.user)
+        if form.is_valid():
+            form.save()
+            messages.success(request, 'You have edited your profile')
+            return redirect('home')
+    else:  # passes in user information
+        form = EditProfileForm(instance=request.user)
 
-	context = {'form': form}
-	return render(request, 'inquizitive/edit_profile.html', context)
-	
+    context = {'form': form}
+    return render(request, 'inquizitive/edit_profile.html', context)
+
 
 def change_password(request):
-	if request.method =='POST':
-		form = PasswordChangeForm(data=request.POST, user= request.user)
-		if form.is_valid():
-			form.save()
-			update_session_auth_hash(request, form.user)
-			messages.success(request, ('You have edited your password'))
-			return redirect('home')
-	else: 		#passes in user information 
-		form = PasswordChangeForm(user= request.user) 
+    if request.method == 'POST':
+        form = PasswordChangeForm(data=request.POST, user=request.user)
+        if form.is_valid():
+            form.save()
+            update_session_auth_hash(request, form.user)
+            messages.success(request, ('You have edited your password'))
+            return redirect('home')
+    else:  # passes in user information
+        form = PasswordChangeForm(user=request.user)
 
-	context = {'form': form}
-	return render(request, 'inquizitive/change_password.html', context)
+    context = {'form': form}
+    return render(request, 'inquizitive/change_password.html', context)
 
 
- 
-def creating_quiz(request): 
-    user=request.user
+def creating_quiz(request):
+    user = request.user
     form = CreateAQuizForm()
     if request.method == 'POST':
         form = CreateAQuizForm(request.POST)
@@ -101,39 +100,38 @@
             form.save(commit=True)
             # Now that the category is saved, we could confirm this. 
             # For now, just redirect the user back to the index view. 
-            return redirect('/inquizitive/adding_questions') ### not sure about this
+            return redirect('/inquizitive/adding_questions')  ### not sure about this
         else:
             # The supplied form contained errors -
             # just print them to the terminal.
-            form=CreateAQuizForm()
+            form = CreateAQuizForm()
     # Will handle the bad form, new form, or no form supplied cases. # Render the form with error messages (if any).
     context = {'form': form}
     return render(request, 'inquizitive/creating_quiz.html', context)
 
- 
-def adding_questions(request): 
-    user=request.user
-    
+
+def adding_questions(request):
+    user = request.user
+
     json = {'a': 1,
             'b': 2,
             'c': 3,
             'd': 4}
-    form = AddAQuestionForm( )
+    form = AddAQuestionForm()
     if request.method == 'POST':
         form = AddAQuestionForm(request.POST)
         # Have we been provided with a valid form?
-        
+
         if form.is_valid():
             # Save the new category to the database. 
             form.save(commit=True)
             # Now that the category is saved, we could confirm this. 
             # For now, just redirect the user back to the index view. 
-            return redirect('add a question') ### not sure about this
+            return redirect('add a question')  ### not sure about this
         else:
             # The supplied form contained errors -
             # just print them to the terminal.
-            form=AddAQuestionForm()
+            form = AddAQuestionForm()
     # Will handle the bad form, new form, or no form supplied cases. # Render the form with error messages (if any).
     context = {'form': form}
     return render(request, 'inquizitive/adding_questions.html', context)
- 
Index: inquizitive/forms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.forms import UserCreationForm, UserChangeForm\r\nfrom django.contrib.auth.models import User\r\nfrom django import forms \r\nimport json\r\nfrom inquizitive.models import Quiz, Question\r\n\r\nfrom django.contrib.postgres.fields.jsonb import JSONField\r\n#from splitjson.widgets import SplitJSONWidget\r\nclass EditProfileForm(UserChangeForm):\r\n\t\r\n\tpassword = forms.CharField(label=\"\", widget=forms.TextInput(attrs={'type':'hidden'}))\r\n\tclass Meta:\r\n\t\tmodel = User\r\n\t\t#excludes private information from User\r\n\t\tfields = ('username', 'first_name', 'last_name', 'email','password',)\r\n\t\t  \r\n\r\n\r\n\r\nclass SignUpForm(UserCreationForm):\r\n\temail = forms.EmailField(label=\"\", widget=forms.TextInput(attrs={'class':'form-control', 'placeholder':'Email Address'}), )\r\n\tfirst_name = forms.CharField(label=\"\", max_length=100, widget=forms.TextInput(attrs={'class':'form-control', 'placeholder':'First Name'}))\r\n\tlast_name = forms.CharField(label=\"\", max_length=100, widget=forms.TextInput(attrs={'class':'form-control', 'placeholder':'Last Name'}))\r\n\t\r\n\t\r\n\tclass Meta:\r\n\t\tmodel = User\r\n\t\tfields = ('username', 'first_name', 'last_name', 'email', 'password1', 'password2',)\r\n\r\n\tdef __init__(self, *args, **kwargs):\r\n\t    super(SignUpForm, self).__init__(*args, **kwargs)\r\n\r\n\t    self.fields['username'].widget.attrs['class'] = 'form-control'\r\n\t    self.fields['username'].widget.attrs['placeholder'] = 'User Name'\r\n\t    self.fields['username'].label = ''\r\n\t    self.fields['username'].help_text = '<span class=\"form-text text-muted\"><small>Required. 150 characters or fewer.</small></span>'\r\n\r\n\t    self.fields['password1'].widget.attrs['class'] = 'form-control'\r\n\t    self.fields['password1'].widget.attrs['placeholder'] = 'Password'\r\n\t    self.fields['password1'].label = ''\r\n\t    self.fields['password1'].help_text = '<ul class=\"form-text text-muted small\"><li>Your password must contain at least 8 characters.</li><li>Password can\\'t be completely numeric.</li></ul>'\r\n\r\n\t    self.fields['password2'].widget.attrs['class'] = 'form-control'\r\n\t    self.fields['password2'].widget.attrs['placeholder'] = 'Confirm Password'\r\n\t    self.fields['password2'].label = ''\r\n\t    self.fields['password2'].help_text = '<span class=\"form-text text-muted\"><small></small></span>'\r\n\r\n \r\n \r\nDIFFICULTY_CHOICES=[\r\n    ('easy', 'Easy'),\r\n    ('medium', 'Medium'),\r\n    ('hard', 'Hard'),\r\n    ]\r\n#form for quiz model\r\nclass CreateAQuizForm(forms.ModelForm):\r\n    quizName = forms.CharField(max_length=500, help_text=\"Quiz Name: \")\r\n    quizSubject = forms.CharField(max_length=500, help_text=\"Quiz Subject: \")\r\n    quizDifficulty=forms.CharField(label='Quiz Difficulty: ', widget=forms.Select(choices=DIFFICULTY_CHOICES))\r\n    class Meta:\r\n        model = Quiz\r\n        fields = ('quizName', 'quizSubject', 'quizDifficulty')\r\n\r\n#form for question model\r\nclass AddAQuestionForm(forms.ModelForm):\r\n    questionText = forms.CharField(widget=forms.TextInput(attrs={'class': 'validate'}), max_length=500,required=True, help_text=\"Enter question\")\r\n    questionMarks = forms.IntegerField(max_value=100, min_value=1)\r\n    #answers = JSONField()\r\n    optiona = forms.CharField(max_length=500, help_text=\"Answer A\")\r\n    optionb = forms.CharField(max_length=500, help_text=\"Answer B\")\r\n    optionc = forms.CharField(max_length=500, help_text=\"Answer C\")\r\n    optiond = forms.CharField(max_length=500, help_text=\"Answer D\")\r\n    correctAnswer=forms.CharField(max_length=500, help_text=\"Enter answer (copy and paste please)\")\r\n   # attrs = {'class': 'special', 'size': '40'}\r\n   # data = forms.CharField(widget=SplitJSONWidget(attrs=attrs, debug=True))\r\n    class Meta:\t\r\n        model = Question\r\n        fields = ('questionText',  'questionMarks', 'optiona' , 'optionb', 'optionc', 'optiond', 'correctAnswer')\r\n   # we should add the ansers as well\r\n \r\n \r\n          \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/inquizitive/forms.py b/inquizitive/forms.py
--- a/inquizitive/forms.py	(revision 42d98afb6f2829f357c39a5f6142017a21c64226)
+++ b/inquizitive/forms.py	(date 1646924162865)
@@ -1,82 +1,91 @@
 from django.contrib.auth.forms import UserCreationForm, UserChangeForm
 from django.contrib.auth.models import User
-from django import forms 
+from django import forms
 import json
 from inquizitive.models import Quiz, Question
 
-from django.contrib.postgres.fields.jsonb import JSONField
-#from splitjson.widgets import SplitJSONWidget
+#from django.contrib.postgres.fields.jsonb import JSONField
+
+
+# from splitjson.widgets import SplitJSONWidget
 class EditProfileForm(UserChangeForm):
-	
-	password = forms.CharField(label="", widget=forms.TextInput(attrs={'type':'hidden'}))
-	class Meta:
-		model = User
-		#excludes private information from User
-		fields = ('username', 'first_name', 'last_name', 'email','password',)
-		  
+    password = forms.CharField(label="", widget=forms.TextInput(attrs={'type': 'hidden'}))
+
+    class Meta:
+        model = User
+        # excludes private information from User
+        fields = ('username', 'first_name', 'last_name', 'email', 'password',)
 
 
-
 class SignUpForm(UserCreationForm):
-	email = forms.EmailField(label="", widget=forms.TextInput(attrs={'class':'form-control', 'placeholder':'Email Address'}), )
-	first_name = forms.CharField(label="", max_length=100, widget=forms.TextInput(attrs={'class':'form-control', 'placeholder':'First Name'}))
-	last_name = forms.CharField(label="", max_length=100, widget=forms.TextInput(attrs={'class':'form-control', 'placeholder':'Last Name'}))
-	
-	
-	class Meta:
-		model = User
-		fields = ('username', 'first_name', 'last_name', 'email', 'password1', 'password2',)
+    email = forms.EmailField(label="",
+                             widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Email Address'}), )
+    first_name = forms.CharField(label="", max_length=100,
+                                 widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'First Name'}))
+    last_name = forms.CharField(label="", max_length=100,
+                                widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Last Name'}))
+
+    class Meta:
+        model = User
+        fields = ('username', 'first_name', 'last_name', 'email', 'password1', 'password2',)
 
-	def __init__(self, *args, **kwargs):
-	    super(SignUpForm, self).__init__(*args, **kwargs)
+    def __init__(self, *args, **kwargs):
+        super(SignUpForm, self).__init__(*args, **kwargs)
 
-	    self.fields['username'].widget.attrs['class'] = 'form-control'
-	    self.fields['username'].widget.attrs['placeholder'] = 'User Name'
-	    self.fields['username'].label = ''
-	    self.fields['username'].help_text = '<span class="form-text text-muted"><small>Required. 150 characters or fewer.</small></span>'
+        self.fields['username'].widget.attrs['class'] = 'form-control'
+        self.fields['username'].widget.attrs['placeholder'] = 'User Name'
+        self.fields['username'].label = ''
+        self.fields[
+            'username'].help_text = '<span class="form-text text-muted"><small>Required. 150 characters or fewer.</small></span>'
 
-	    self.fields['password1'].widget.attrs['class'] = 'form-control'
-	    self.fields['password1'].widget.attrs['placeholder'] = 'Password'
-	    self.fields['password1'].label = ''
-	    self.fields['password1'].help_text = '<ul class="form-text text-muted small"><li>Your password must contain at least 8 characters.</li><li>Password can\'t be completely numeric.</li></ul>'
+        self.fields['password1'].widget.attrs['class'] = 'form-control'
+        self.fields['password1'].widget.attrs['placeholder'] = 'Password'
+        self.fields['password1'].label = ''
+        self.fields[
+            'password1'].help_text = '<ul class="form-text text-muted small"><li>Your password must contain at least 8 characters.</li><li>Password can\'t be completely numeric.</li></ul>'
 
-	    self.fields['password2'].widget.attrs['class'] = 'form-control'
-	    self.fields['password2'].widget.attrs['placeholder'] = 'Confirm Password'
-	    self.fields['password2'].label = ''
-	    self.fields['password2'].help_text = '<span class="form-text text-muted"><small></small></span>'
+        self.fields['password2'].widget.attrs['class'] = 'form-control'
+        self.fields['password2'].widget.attrs['placeholder'] = 'Confirm Password'
+        self.fields['password2'].label = ''
+        self.fields['password2'].help_text = '<span class="form-text text-muted"><small></small></span>'
 
- 
- 
-DIFFICULTY_CHOICES=[
+
+DIFFICULTY_CHOICES = [
     ('easy', 'Easy'),
     ('medium', 'Medium'),
     ('hard', 'Hard'),
-    ]
-#form for quiz model
+]
+
+
+# form for quiz model
 class CreateAQuizForm(forms.ModelForm):
     quizName = forms.CharField(max_length=500, help_text="Quiz Name: ")
     quizSubject = forms.CharField(max_length=500, help_text="Quiz Subject: ")
-    quizDifficulty=forms.CharField(label='Quiz Difficulty: ', widget=forms.Select(choices=DIFFICULTY_CHOICES))
+    quizDifficulty = forms.CharField(label='Quiz Difficulty: ', widget=forms.Select(choices=DIFFICULTY_CHOICES))
+
     class Meta:
         model = Quiz
         fields = ('quizName', 'quizSubject', 'quizDifficulty')
 
-#form for question model
+
+# form for question model
 class AddAQuestionForm(forms.ModelForm):
-    questionText = forms.CharField(widget=forms.TextInput(attrs={'class': 'validate'}), max_length=500,required=True, help_text="Enter question")
+    questionText = forms.CharField(widget=forms.TextInput(attrs={'class': 'validate'}), max_length=500, required=True,
+                                   help_text="Enter question")
     questionMarks = forms.IntegerField(max_value=100, min_value=1)
-    #answers = JSONField()
+	# answers = JSONField()
     optiona = forms.CharField(max_length=500, help_text="Answer A")
     optionb = forms.CharField(max_length=500, help_text="Answer B")
     optionc = forms.CharField(max_length=500, help_text="Answer C")
     optiond = forms.CharField(max_length=500, help_text="Answer D")
-    correctAnswer=forms.CharField(max_length=500, help_text="Enter answer (copy and paste please)")
-   # attrs = {'class': 'special', 'size': '40'}
-   # data = forms.CharField(widget=SplitJSONWidget(attrs=attrs, debug=True))
-    class Meta:	
+    correctAnswer = forms.CharField(max_length=500, help_text="Enter answer (copy and paste please)")
+
+    # attrs = {'class': 'special', 'size': '40'}
+    # data = forms.CharField(widget=SplitJSONWidget(attrs=attrs, debug=True))
+    class Meta:
         model = Question
-        fields = ('questionText',  'questionMarks', 'optiona' , 'optionb', 'optionc', 'optiond', 'correctAnswer')
-   # we should add the ansers as well
+        fields = ('questionText', 'questionMarks', 'optiona', 'optionb', 'optionc', 'optiond', 'correctAnswer')
+# we should add the ansers as well
  
  
           
Index: populate_database.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/populate_database.py b/populate_database.py
new file mode 100644
--- /dev/null	(date 1646921912018)
+++ b/populate_database.py	(date 1646921912018)
@@ -0,0 +1,113 @@
+import os
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE',
+                      'inquizitive_wad2_project.settings')
+import django
+#from django.core.files import File
+from inquizitive.models import UserProfile, Quiz
+
+django.setup()
+
+
+def add_quiz(name: str, subject: str, difficulty: str, questions: dict, description: str, comments: dict, rating: list):
+    q = Quiz.objects.get_or_create(name=name, subject=subject, difficulty=difficulty, description=description,
+                                   comments=comments,
+                                   rating=rating)[0]
+
+
+def add_user(username: str, complete_quizzes: dict, score: list, rated_quizzes: dict, password: str, email: str,
+             name: str):
+    u = UserProfile.objects.get_or_create(username=username, complete_quizzes=complete_quizzes, score=score,
+                                          rated_quizzes=rated_quizzes,
+                                          password=password, email=email, name=name)
+
+    # Add image to user's profile
+
+    # Add quiz ratings
+    for quiz in rated_quizzes.keys():
+        rates(name, quiz)
+
+    for quiz in complete_quizzes:
+        score(name, quiz)
+
+    return u
+
+
+def rates(user: str, quiz: str):
+    # Create a link between the user and the quiz.
+    user_obj = UserProfile.objects.get(name=user)
+    quiz_obj = Quiz.objects.get(quiz=quiz)
+
+    user_obj.rates.add(quiz_obj)
+    # Append rating to ratings list.
+    quiz_obj.ratings.append(user_obj.rated_quizzes[quiz_obj.quiz])
+    quiz_obj.save()
+
+
+def populate():
+
+    # Quiz data, list of dictionaries?
+    quiz_data = [
+        {"name": "Biology 101", "subject": "Biology", "difficulty": "Easy",
+         "questions": [{"question": "What is the powerhouse of the cell?",
+                        "choices": ["The Nucleus", "The Mitochondria", "The Membrane", "Tiny"], "correct_index": 1},
+                       {"question": "What organ pumps blood around the body?",
+                        "choices": ["The Liver", "The Brain", "The Kidneys", "The Heart"], "correct_index": 3},
+                       {"question": "Who discovered penicillin?",
+                        "choices": ["Andy Warhol", "Nikolas Tesla", "Alexander Fleming", "Adam Smith"], "correct_index": 2},
+                       {"question": "What is the human body's largest organ?",
+                        "choices": ["The Brain", "The Heart", "The Skin", "The Ego"], "correct_index": 2},
+                       {"question": "Botany is the study of what life form?",
+                        "choices": ["Plants", "Diseases", "Crustaceans", "Mammals"]}],
+         "description": "Quick general biology quiz.",
+         "comments": {}, "rating": []},
+
+        {"name": "General Knowledge", "subject": "General", "difficulty": "Medium",
+         "questions": [{"question": "What is the world's largest land mammal?",
+                        "choices": ["Elephant", "Giraffe", "Yeti", "Giant camel"], "correct_index": 0},
+                       {"question": "The first atomic bomb was dropped on which Japanese city?",
+                        "choices": ["Nagasaki", "Kyoko", "Tokyo", "Hiroshima"], "correct_index": 3},
+                       {"question": "How many of Henry VIII's wives were called Anne?",
+                        "choices": ["One", "Two", "Four", "Six"], "correct_index": 1},
+                       {"question": "What was the middle name of Wolfgang Mozart?",
+                        "choices": ["Georg", "Heinrich", "Amadeus", "Maddeus"], "correct_index": 2},
+                       {"question": "Which middle eastern city is also the name of an artichoke?",
+                        "choices": ["Jerusalem", "Istanbul", "Ankara", "Izmir"], "correct_index": 0},
+                       {"question": "In mythology, Romulus and Remus were brought up by which animal?",
+                        "choices": ["Lion", "Bear", "Tiger", "Wolf"], "correct_index": 3},
+                       {"question": "Nostradamus was famous for making what?",
+                        "choices": ["Cakes", "Potions", "Predictions", "Enchantments"], "correct_index": 2},
+                       ],
+         "description": "Short general knowledge quiz.", "comments": {}, "rating": []},
+
+        {"name": "Sports Trivia", "subject": "Sports", "difficulty": "Medium",
+         "questions": [{"question": "Who became the first driver to win the first four races of a Formula One grand prix season in 1991?",
+                        "choices": ["Lewis Hamilton", "Fernando Alonso", "Ayrton Senna", "Michael Schumacher"], "correct_index": 2},
+                       {"question": "Which brothers have held boxing World Heavyweight titles in the twenty-first century?",
+                        "choices": ["The Klitschko Brothers", "The Wright Brothers", "The Kennedy Brothers", "The Kray Brothers"], "correct_index": 0},
+                       ],
+         "description": "Test your sports knowledge with this quiz!", "comments": {}, "rating": []},
+
+        {"name": "Shakespeare Quiz", "subject": "Literature", "difficulty": "Hard",
+         "questions": [{"question": "How many plays did Shakespeare write?",
+                        "choices": ["36", "42", "37", "47"], "correct_index": 2},
+                       {"question": "How many sonnets did Shakespeare write?",
+                        "choices": ["32", "150", "54", "154"], "correct_index": 3},
+                       {"question": "What is Shakespeare's Venus and Adonais?",
+                        "choices": ["A Tragedy", "A Comedy", "A Narrative Poem", "A Romance"], "correct_index": 2},
+                       {"question": "Who called Shakespeare 'an upstart crow beautified with our feathers?'",
+                        "choices": ["Robert Greene", "Thomas Kyd", "George Peele", "John Lyly"], "correct_index": 0},
+                       {"question": "Who said, 'Shakespeare has only heroines and no heroes'?",
+                        "choices": ["Sidney", "Ruskin", "Ben Jonson", "Marlowe"], "correct_index": 1},
+                       {"question": "The well-know phrase 'What's in a name' occurs in which of the following?",
+                        "choices": ["Othello", "Hamlet", "Julius Caesar", "Romeo and Juliet"], "correct_index": 3},
+                       ],
+         "description": "How well do you know the bard?", "comments": {}, "rating": []}
+    ]
+
+
+if __name__ == "__main__":
+    print("Starting population script...")
+    populate()
+
+    print("Population completed.")
diff --git a/inquizitive/templates/inquizitive/answering_quiz.html b/templates/answering_quiz.html
rename from inquizitive/templates/inquizitive/answering_quiz.html
rename to templates/answering_quiz.html
diff --git a/inquizitive/templates/inquizitive/base.html b/templates/base.html
rename from inquizitive/templates/inquizitive/base.html
rename to templates/base.html
diff --git a/inquizitive/templates/inquizitive/change_password.html b/templates/change_password.html
rename from inquizitive/templates/inquizitive/change_password.html
rename to templates/change_password.html
diff --git a/inquizitive/templates/inquizitive/adding_questions.html b/templates/adding_questions.html
rename from inquizitive/templates/inquizitive/adding_questions.html
rename to templates/adding_questions.html
diff --git a/inquizitive/templates/inquizitive/edit_profile.html b/templates/edit_profile.html
rename from inquizitive/templates/inquizitive/edit_profile.html
rename to templates/edit_profile.html
diff --git a/inquizitive/templates/inquizitive/home.html b/templates/home.html
rename from inquizitive/templates/inquizitive/home.html
rename to templates/home.html
diff --git a/inquizitive/templates/inquizitive/login.html b/templates/login.html
rename from inquizitive/templates/inquizitive/login.html
rename to templates/login.html
diff --git a/inquizitive/templates/inquizitive/register.html b/templates/register.html
rename from inquizitive/templates/inquizitive/register.html
rename to templates/register.html
diff --git a/inquizitive/templates/inquizitive/my_profile.html b/templates/my_profile.html
rename from inquizitive/templates/inquizitive/my_profile.html
rename to templates/my_profile.html
diff --git a/inquizitive/templates/inquizitive/creating_quiz.html b/templates/creating_quiz.html
rename from inquizitive/templates/inquizitive/creating_quiz.html
rename to templates/creating_quiz.html
